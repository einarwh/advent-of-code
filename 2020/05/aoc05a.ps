/read-input
{                           % fn
    [                       % | fn
    exch                    % fn |
    (r) file                % F |
    {
        dup                 % F F ... |
        80 string           % buf F F ... |
        readline            % (s) F ... |
        {
            exch            % F (s) ... |
        }
        {
            exch            % F (s) ... |
            closefile       % (s) ... |
            ]               % | (s) ... |
            exit
        } ifelse 
    } loop                  % Rs
} def 

/split-at {                 % i A 
    2 copy                  % i A i A 
    0 exch                  % i 0 A i A 
    getinterval             % A'=A[0,i-1] i A
    3 1 roll                % i A A' 
    1 index length          % L i A A'
    1 index                 % i L i A A'
    sub                     % c i A A'
    getinterval             % A''=A[i,L-1] A'           
} def 

/to-bits {                  % ch A
    exch                    % A ch
    [                       % | A ch 
    3 1 roll                % A ch | 
    {                       % x ch ... | 
        1 index             % ch x ch ... |
        eq 
        { 1 }               % 1 ch ... |
        { 0 }               % 0 ch ... |
        ifelse              % n ch ... |
        exch                % ch n ... |
    } forall                % ch ... |
    pop                     % ... | 
    ]                       % A'
} def 

/to-mask {                  % A 
    dup length              % s=L A
    exch                    % A s
    0                       % m=0 A s
    3 1 roll                % A s m
    {                       % x s m
        exch                % s x m
        1 sub               % s' x m
        exch                % x s' m 
        1 index             % s' x s' m 
        bitshift            % x' s' m
        3 -1 roll           % m x' s'
        or                  % m' s'
        exch                % s' m'
    } forall                % s m 
    pop                     % m
} def 

/pos { 0 get to-bits to-mask } def 

/row { (B) pos } def

/col { (R) pos } def 

/seat-id {                  % S
    [ exch {} forall ]      % A(chars) 
    7 split-at              % A1(col) A2(row)
    col exch row            % r c 
    8 mul add               % id
} def 

/find-highest {             % A 
    0                       % r=0 A
    exch                    % A r
    {                       % x r
        seat-id             % id r 
        2 copy              % id r id r 
        lt                  % ? id r 
        {                   % id r (r < id)
            exch            % r id 
        } if  
        pop                 % max(r, id)
    } forall
} def 

(input.txt) read-input find-highest