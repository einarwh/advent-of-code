/split-at {                         % A i 
    2 copy                          % A i A i 
    0 exch                          % A i A 0 i 
    getinterval                     % A i A'=A[0,i-1]
    3 1 roll                        % A' A i
    1 index length                  % A' A i L 
    1 index                         % i L i A A'
    sub                             % A' A i c
    getinterval                     % A' A''=A[i,L-1]
} def 

%%% Allocates a history H, which is a nested array of arrays.
%%% Each array is of size z. 
%%% In total, the history can hold the smallest multiple of z at least the size of n.
/create-history {                   % n z %%% z is segment size, n is total number of elements
    dup                             % n z z
    3 1 roll                        % z n z 
    2 copy                          % z n z n z 
    idiv                            % z n z n/z 
    3 1 roll                        % z n/z n z 
    mod                             % z n/z n%z
    0 gt                            % z n/z n%z>0?
    {
        1 add                       % z n/z+1
    } if                            % z c %%% c is number of arrays of size z
    [ 3 1 roll                      % [ z c 
    {                               % [ z 
        dup array exch              % [ A z
    } repeat                        % [ ... z
    pop                             % [ ...
    ]                               % [ A1... ]
} def

/remember {                         % H i x %%% Stores the item x at index i in the history H.
    3 1 roll                        % x H i 
    1 index                         % x H i H 
    1 index                         % x H i H i 
    exch                            % x H i i H 
    0 get                           % x H i h0 %%% h0 is the first array in H.
    length                          % x H i z %%% z is the segment size of the history H.
    dup                             % x H i i z z 
    3 1 roll                        % x H i z i z 
    idiv                            % x H i z i/z %%% i/z is the index of the correct array in H.
    4 -1 roll                       % x i z i/z H 
    exch                            % x i z H i/z
    get                             % x i z h %%% h is the correct array in H.
    3 1 roll                        % x h i z 
    mod                             % x h i%z %%% i%z is the index of the correct element in h.
    3 -1 roll                       % h i%z x 
    put
} def 

/lookup {                           % H i %%% Lookup the item at index i in the history H.
    1 index 0 get                   % H i h0 %%% h0 is the first array in H.
    length                          % H i z %%% z is the segment size of H.
    2 copy                          % H i z i z 
    idiv                            % H i z i/z %%% i/z is the index of the correct array in H.
    4 -1 roll                       % i z i/z H 
    exch                            % i z H i/z 
    get                             % i z h %%% h is the correct array in H.
    3 1 roll                        % h i z 
    mod                             % h i%z %%% i%z is the index of the correct element in h.
    get                             % r
} def 

/find-max-number {                  % N %%% An array of numbers, length at least 1. 
    dup 0 get                       % N m
    exch                            % m N 
    {                               % m n 
        2 copy                      % m n m n 
        lt                          % m n m<n?
        {                           % m n %%% replace m with n
            exch pop                % n 
        }  
        {                           % m n %%% keep m
            pop
        } ifelse                    % m'
    } forall 
} def 

/init-history {                     % H N %%% H: history, N: numbers for initialization
    1 exch                          % H i N %%% i: index
    {                               % H i n 
        exch                        % H n i 
        dup                         % H n i i 
        1 add                       % H n i i+1 
        3 1 roll                    % H i+1 n i
        3 index                     % H i+1 n i H 
        3 1 roll                    % H i+1 H n i 
        remember                    % H i+1
    } forall                        % H i'
    pop                             % H
} def 

/run {                              % N t %%% N: start numbers, t: number of turns to run
    2 copy                          % N t N t 
    4 1 roll                        % t N t N 
    find-max-number 1 add           % t N t ms %%% ms: max number in start numbers + 1
    max                             % t N m %%% m: size of history
    10000 create-history            % t N H 
    exch                            % t H N 
    dup length                      % t H N j %%% j: number of start numbers
    exch                            % t H j N 
    dup length 1 sub split-at       % t H j N1 N2
    0 get                           % t H j N1 s %%% s: last spoken := last start number
    exch                            % t H j s N1
    4 -1 roll                       % t j s N1 H
    exch                            % t j s H N1
    init-history                    % t j s H 
    4 -1 roll                       % j s H t 
    1 sub                           % j s H t-1 %%% loop up to t times
    4 -1 roll                       % s H t-1 j
    exch                            % s H j t-1
    1 exch                          % s H j 1 t-1 %%% start at j, step 1 until t-1
    {                               % s H i %%% i: turn - 1
        3 1 roll                    % i s H 
        2 copy                      % i s H s H 
        exch                        % i s H H s 
        lookup                      % i s H p=H[s] %%% p: previous time s was spoken (or null)
        4 1 roll                    % p i s H 
        3 copy                      % p i s H i s H 
        3 1 roll                    % p i s H H i s 
        exch                        % p i s H H s i 
        remember                    % p i s H 
        exch pop                    % p i H 
        2 index                     % p i H p 
        null eq                     % p i H p=null?
        {                           % p i H %%% yes, null => s should be 0.
            3 1 roll                % H p i 
            pop pop                 % H 
            0 exch                  % 0 H 
        }                           % s H
        {                           % p i H %%% no => s should be i - p 
            3 1 roll                % H p i
            exch                    % H i p 
            sub                     % H i-p
            exch                    % i-p H 
        } ifelse                    % s H 
    } for                           % s H 
    pop                             % s
} def 

/ex-start-numbers {
    [ 0 3 6 ]
} def 

/my-start-numbers {
    [ 1 0 15 2 10 13 ]
} def 

/timed {                            % {}
    realtime                        % {} t0
    exch exec                       % t0 R
    exch                            % R t0 
    realtime                        % R t1 t0
    exch sub                        % R t1-t0
    1000 div =                      % R
} def 

/part-1 {
    { my-start-numbers 2020 run } timed
} def 

/part-2 {
    { my-start-numbers 30000000 run } timed
} def 