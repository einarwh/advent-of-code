/read-input
{                               % fn
    [                           % | fn
    exch                        % fn |
    (r) file                    % F |
    {   
        dup                     % F F ... |
        40 string               % buf F F ... |
        readline                % (s) F ... |
        {   
            exch                % F (s) ... |
        }   
        {   
            exch                % F (s) ... |
            closefile           % (s) ... |
            ]                   % | (s) ... |
            exit    
        } ifelse    
    } loop                      % Rs
} def 


% verdi index array
% inc pos array

/update {                           % inc ix arr
    3 copy                          % inc ix arr inc ix arr
    3 1 roll                        % ix arr inc inc ix arr 
    get                             % v inc inc ix arr 
    add                             % v' inc ix arr 
    exch pop                        % v' ix arr 
    2 index                         % arr v' ix arr 
    3 1 roll                        % v' ix arr arr 
    put                             % arr'
} def 

% Expect arg and register on stack.
/nop {                              % n [ pos acc ]
    pop                             % [ pos acc ]
    0 1 update                      % [ pos+1 acc ]    
} def 

% Expect arg and register on stack.
/jmp {                              % n [ pos acc ]
    0 exch                          % n 0 [ pos acc ]
    update                          % [ pos+n acc ]    
} def 

% Expect arg and register on stack.
/acc {                              % n [ pos acc ]
    1 exch                          % n 1 [ pos acc ]
    update                          % [ pos acc+n ]    
    0 1 update                      % [ pos+1 acc+n ]
} def 

% (acc) | (jmp) | (nop)
/load-op {                          % (op)
    dup (acc)                       % (acc) (op) (op)
    eq                              % op=acc? (op)
    {                               % (op) % yes acc 
        pop                         % 
        /acc                        % /acc
    }           
    {                               % (op) % not acc
        (jmp)                       % (jmp) (op)
        eq                          % op=jmp?
        {                           % % yes jmp
            /jmp                    % /jmp
        }
        {
            /nop                    % /nop 
        } ifelse  
    } ifelse 
    load 
} def 

/parse-inst {                       % (s)
    ( ) search                      % true (op) ( ) (+-n)
    pop                             % (op) ( ) (+-n)
    load-op                         % {op} ( ) (+-n)
    exch pop                        % {op} (+-n)
    exch cvi                        % n {op}
    exch                            % {op} n
    [ 3 1 roll ]                    % [{op} n]
} def 

/execute-inst {                     % [ arg {op} ] [ pos acc ]
    aload pop exec 
} def 

/parse-program {
    [ exch { parse-inst} forall ]
} def

/cons {                             % h t 
    [ 3 1 roll ]                    % [ t h ]
} def 

/head {                             % [ t h ]
    1 get                           % h 
} def 

/tail {                             % [ t h ]
    0 get                           % t
} def 

% Check for element in linked list.
/contains {                         % e C 
    exch                            % C e 
    dup length                      % L C e 
    0 eq                            % L=0? C e 
    {                               % C e % empty list
        pop pop                     % 
        false                       % false
    }
    {                               % C e % non-empty list
        dup head                    % h C e 
        2 index                     % e h C e 
        eq                          % h=e? C e 
        {                           % C e % found it
            pop pop                 %  
            true                    % true
        }
        {                           % C e % not found yet
            tail                    % t e 
            exch                    % e t 
            contains                % bool
        } ifelse 
    } ifelse
} def

% Insert element if not already present in linked list 
/insert {                           % e C 
    2 copy                          % e C e C 
    contains                        % ? e C
    {                               % e C % already present
        pop                         % C 
    }
    {                               % e C % insert
        cons                        % C'
    } ifelse 
} def 

% Is: array of instructions
/run-program {                      % I
    [ 0 0 ]                         % [pos acc] Is
    exch                            % Is [pos acc]
    []                              % C Is [pos acc]
    3 1 roll                        % Is [pos acc] C
    {                               % Is [pos acc] C
        1 index                     % [pos acc] Is [pos acc] C 
        0 get                       % pos Is [pos acc] C 
        3 index                     % C pos Is [pos acc] C
        exch                        % pos C Is [pos acc] C
        contains                    % ? Is [pos acc] C
        {                           % Is [pos acc] C % loop detected
            pop                     % [pos acc] C
            1 get                   % acc C 
            exch pop                % acc
            exit 
        }
        {                           % Is [pos acc] C % no loop yet
            dup                     % Is Is [pos acc] C
            4 1 roll                % Is [pos acc] C Is
            1 index                 % [pos acc] Is [pos acc] C Is 
            0 get                   % pos Is [pos acc] C Is 
            4 -1 roll               % C pos Is [pos acc] C Is 
            1 index                 % pos C pos Is [pos acc] Is
            cons                    % C' pos Is [pos acc] Is
            4 1 roll                % pos Is [pos acc] C' Is
            get                     % I [pos acc] C' Is  
            execute-inst            % [pos' acc'] C' Is
            3 -1 roll               % Is [pos' acc'] C'
            %stop
        } ifelse
    } loop
} def 

/part-1 {
    (input.txt)
    read-input
    parse-program
    run-program
} def 

part-1 