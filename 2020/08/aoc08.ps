/read-input
{                                   % fn
    [                               % | fn
    exch                            % fn |
    (r) file                        % F |
    {       
        dup                         % F F ... |
        20 string                   % buf F F ... |
        readline                    % (s) F ... |
        {       
            exch                    % F (s) ... |
        }       
        {       
            exch                    % F (s) ... |
            closefile               % (s) ... |
            ]                       % | (s) ... |
            exit        
        } ifelse        
    } loop                          % Rs
} def 

/update {                           % inc ix arr
    3 copy                          % inc ix arr inc ix arr
    3 1 roll                        % ix arr inc inc ix arr 
    get                             % v inc inc ix arr 
    add                             % v' inc ix arr 
    exch pop                        % v' ix arr 
    2 index                         % arr v' ix arr 
    3 1 roll                        % v' ix arr arr 
    put                             % arr'
} def 

% Expect arg and register on stack.
/nop {                              % n [ pos acc ]
    pop                             % [ pos acc ]
    0 1 update                      % [ pos+1 acc ]    
} def 

% Expect arg and register on stack.
/jmp {                              % n [ pos acc ]
    0 exch                          % n 0 [ pos acc ]
    update                          % [ pos+n acc ]    
} def 

% Expect arg and register on stack.
/acc {                              % n [ pos acc ]
    1 exch                          % n 1 [ pos acc ]
    update                          % [ pos acc+n ]    
    0 1 update                      % [ pos+1 acc+n ]
} def 

% (acc) | (jmp) | (nop)
/load-op {                          % (op)
    dup (acc)                       % (acc) (op) (op)
    eq                              % op=acc? (op)
    {                               % (op) % yes acc 
        pop                         % 
        /acc                        % /acc
    }           
    {                               % (op) % not acc
        (jmp)                       % (jmp) (op)
        eq                          % op=jmp?
        {                           % % yes jmp
            /jmp                    % /jmp
        }
        {
            /nop                    % /nop 
        } ifelse  
    } ifelse 
    load 
} def 

/parse-inst {                       % (s)
    ( ) search                      % true (op) ( ) (+-n)
    pop                             % (op) ( ) (+-n)
    load-op                         % {op} ( ) (+-n)
    exch pop                        % {op} (+-n)
    exch cvi                        % n {op}
    exch                            % {op} n
    /exec cvx                       % exec {op} n
    [ 4 1 roll ]                    % [n {op} exec]
    cvx                             % {n {op} exec}
} def 

/parse-program {
    [ exch { parse-inst} forall ]
} def

/cons {                             % h t 
    [ 3 1 roll ]                    % [ t h ]
} def 

/head {                             % [ t h ]
    1 get                           % h 
} def 

/tail {                             % [ t h ]
    0 get                           % t
} def 

% Check for element in linked list.
/contains {                         % e C 
    exch                            % C e 
    dup length                      % L C e 
    0 eq                            % L=0? C e 
    {                               % C e % empty list
        pop pop                     % 
        false                       % false
    }
    {                               % C e % non-empty list
        dup head                    % h C e 
        2 index                     % e h C e 
        eq                          % h=e? C e 
        {                           % C e % found it
            pop pop                 %  
            true                    % true
        }
        {                           % C e % not found yet
            tail                    % t e 
            exch                    % e t 
            contains                % bool
        } ifelse 
    } ifelse
} def

% P: array of instructions
% P => [ acc completed? ]
/run-program {                      % I
    [ 0 0 ]                         % [pos acc] P
    exch                            % P [pos acc]
    []                              % C P [pos acc]
    3 1 roll                        % P [pos acc] C
    {                               % P [pos acc] C
        1 index                     % [pos acc] P [pos acc] C 
        0 get                       % pos P [pos acc] C 
        3 index                     % C pos P [pos acc] C
        exch                        % pos C P [pos acc] C
        contains                    % ? P [pos acc] C
        {                           % P [pos acc] C % loop detected
            pop                     % [pos acc] C
            1 get                   % acc C 
            exch pop                % acc
            false                   % false acc 
            [ 3 1 roll ]            % [false acc]
            exit 
        }
        {                           % P [pos acc] C % no loop yet
            dup                     % P P [pos acc] C
            4 1 roll                % P [pos acc] C P
            1 index                 % [pos acc] P [pos acc] C P 
            0 get                   % pos P [pos acc] C P 
            4 -1 roll               % C pos P [pos acc] C P 
            1 index                 % pos C pos P [pos acc] P
            cons                    % C' pos P [pos acc] P
            4 1 roll                % pos P [pos acc] C' P
            get                     % I [pos acc] C' P  
            exec                    % [pos' acc'] C' P
            2 index length          % L [pos' acc'] C' P 
            1 index                 % [pos' acc'] L [pos' acc'] C' P
            0 get                   % pos' L [pos' acc'] C' P 
            eq                      % pos'=L? [pos' acc'] C' P 
            {                       % [pos' acc'] C' P (completed)
                3 1 roll            % C' P [pos' acc']
                pop pop             % [pos' acc']
                1 get               % acc'
                true                % true acc'
                [ 3 1 roll ]        % [true acc']
                exit
            }
            {                       % [pos' acc'] C' P
                3 -1 roll           % P [pos' acc'] C'
            } ifelse
            %stop
        } ifelse
    } loop
} def 

/run-once {
    run-program 0 get
} def 
 
% I=[n {op}] => [I'] where I' is replacement or not present.
/replacement {                      % I=[n {op}]
    dup                             % I I 
    aload pop                       % exec {op} n I
    pop                             % {op} n
    /nop load eq                    % nop? n I 
    {                               % n I % replace with jmp
        /jmp load                   % {jmp} n I 
        /exec cvx                   % exec {jmp} n I
        [ 4 1 roll ]                % [n {jmp} exec] I
        cvx                         % {n {jmp} exec} I
        exch pop                    % {n {jmp} exec}
        1 array astore              % [{n {jmp} exec}]
    }
    {                               % n I % not a nop
        pop dup                     % I I 
        aload pop                   % exec {op} n I 
        pop                         % {op} n I 
        /jmp load eq                % jmp? n I 
        {                           % n I % replace with nop
            /nop load               % {nop} n I 
            /exec cvx               % exec {nop} n I
            [ 4 1 roll ]            % [n {nop} exec] I
            cvx                     % {n {nop} exec} I
            exch pop                % {n {nop} exec}
            1 array astore          % [{n {nop} exec}]
        } 
        {                           % n I % must be acc
            pop pop                 %
            []                      % [] % no replacement
        } ifelse 
    } ifelse 
} def 

/apply-fix {                        % I i P          
    3 -1 roll                       % P I i 
    dup length                      % L P I i 
    array                           % Pz P I i
    copy                            % P' I i 
    dup                             % P' P' I i 
    4 -2 roll                       % I i P' P'
    put                             % P'
} def 

/permutations {                     % P 
    [ exch                          % P | 
    0                               % 0 P | 
    1 index                         % P 0 P | 
    {                               % I i P |
        replacement                 % [I'?] i P | 
        dup length                  % L [I'?] i P | 
        0 eq                        % empty? [I'?] i P |
        {                           % [] i P |
            pop                     % i P |
        }
        {                           % [I'] i P |
            0 get                   % I' i P |
            3 copy                  % I' i P I' i P |
            apply-fix               % P' I' i P |
            exch pop                % P' i P |
            3 1 roll                % i P P' |
        } ifelse                    % i P ... |         
        1 add                       % i+1 P ... |
    } forall                        % i P ... |
    pop pop                         % ... |
    ]
} def 

/run-until-completed {              % Ps 
    {                               % P 
        run-program                 % [ acc completed? ]
        aload pop                   % completed? acc 
        {                           % acc
            exit                    % acc
        } 
        {                           % acc
            pop                     %
        } ifelse 
    } forall 
} def 

/read-program {
    (input.txt)
    read-input
    parse-program
} def 

/part-1 {
    read-program 
    run-once
} def 

/part-2 {
    read-program
    permutations
    run-until-completed
} def 
