/read-input
{                                   % fn
    [                               % fn [
    exch                            % [ fn
    (r) file                        % [ F
    {       
        dup                         % [ ... F F 
        200 string                  % [ ... F F buf
        readline                    % [ ... F (s)
        {       
            exch                    % [ ... (s) F
        }       
        {       
            exch                    % [ ... (s) F
            closefile               % [ ... (s)
            ]                       % [ ... (s) ]
            exit        
        } ifelse        
    } loop                          % Rs
} def 

/split-at {                         % A i 
    2 copy                          % A i A i 
    0 exch                          % A i A 0 i 
    getinterval                     % A i A'=A[0,i-1]
    3 1 roll                        % A' A i
    1 index length                  % A' A i L 
    1 index                         % i L i A A'
    sub                             % A' A i c
    getinterval                     % A' A''=A[i,L-1]
} def 

/split-string {                     % s z %%% z: separator s: string
    [                               % s z [
    3 1 roll                        % [ s z  
    {                               % [ s z  
        search                      % [ s' h found? %%% s': rest, h: head z
        {                           % [ s' z h %%% yes, found
            3 1 roll                % [ h s' z
        }   
        {                           % [ s %%% not found
            exit                    % [ s 
        } ifelse
    } loop                          % [ s ... 
    ]                               % [ s ... ]
} def 

/map-array {                        % A {op} %%% {op} is operation to be called for each element in A
    [ 3 1 roll                      % [ A {op}
    exch                            % [ {op} A
    {                               % [ {op} e
        1 index                     % [ {op} e {op}
        exec                        % [ {op} r %%% r is result of executing {op} on e
        exch                        % [ r {op}
    } forall                        % [ ... {op}
    pop                             % [ ...
    ]                               % [ r1 r2 ... ]
} def

/indexed-array {                    % A
    [ exch                          % [ A 
    0 exch                          % [ 0 A 
    {                               % [ i e
        1 index exch                % [ i i e 
        [ 3 1 roll ]                % [ i [i e]
        exch                        % [ [i e] i 
        1 add                       % [ [i e] i+1 
    } forall                        % [ ... [i e] i
    pop                             % [ ...
    ]                               % [...]
} def

/fold-array {                       % S A {f} %%% {f}: function to fold over A, S: state of fold
    3 1 roll                        % {f} S A
    {                               % {f} S e %%% e is element in A
        2 index                     % {f} S e {f}
        exec                        % {f} S'
    } forall 
    exch pop                        % S'
} def 

/filter-array {                     % A {p} %%% {p} is predicate to be called for each element in A
    [ 3 1 roll                      % [ A {p}
    exch                            % [ {p} A
    {                               % [ {p} e
        2 copy                      % [ {p} e {p} e
        exch                        % [ {p} e e {p}
        exec                        % [ {p} e include?
        {                           % [ {p} e %%% yes, keep e
            exch                    % [ e {p}
        }
        {                           % [ {p} e %%% no, reject e
            pop                     % [ {p}
        } ifelse                    % [ e? {p}
    } forall                        % [ ... {p}
    pop                             % [ ...
    ]                               % [ e... ]
} def 

/min-by {                           % v1 v2 {f} %%% {f} is a function that turns values like v1 and v2 into numbers for comparison
    3 copy                          % v1 v2 {f} v1 v2 {f}  
    exec                            % v1 v2 {f} v1 n2 
    3 1 roll                        % v1 v2 n2 {f} v1
    exch                            % v1 v2 n2 v1 {f}
    exec                            % v1 v2 n2 n1 
    gt                              % v1 v2 n2>n1? 
    {                               % v1 v2 %%% yes, n2>n1, choose v1
        pop                         % v1
    }
    {
        exch pop                    % v2
    } ifelse
} def

/array-min-by {                     % A {f} %%% {f} is a function that turns each element in A into a number for comparison.
    exch                            % {f} A 
    dup 0 get                       % {f} A m=e %%% m is minimum value so far
    exch                            % {f} m A 
    {                               % {f} m e 
        2 index                     % {f} m e {f}
        exec                        % {f} m' %%% m': min(m, e)
    } forall                        % {f} m
    exch pop                        % m 
} def 

/waiting-time {                     % t %%% t is the timestamp
    [ exch                          % [ t 
        {                           % b t 
            exch                    % t b 
            dup                     % t b b 
            3 -1 roll               % b b t 
            1 index                 % b b t b 
            mod                     % b b t%b
            sub                     % b w=b-t%b
            [ 3 1 roll ]            % [b w]
        } 
        /exec cvx 
    ] cvx 
} def 

/part-1 {
    (input.txt) read-input          % A
    dup                             % A A 
    0 get cvi                       % A t %%% timestamp 
    exch                            % t A 
    1 get                           % t (s)
    (,) split-string                % t S
    { (x) ne } filter-array         % t S' %%% S': S with (x) strings removed.
    { cvi } map-array               % t B %%% B: array of bus numbers
    exch                            % B t 
    waiting-time                    % B {w} %%% {w}: procedure to calculate waiting time.
    map-array                       % T %%% T: array of buses and waiting times
    { { 1 get } min-by }            % T {min} %%% : {min}: procedure to select smallest element.
    array-min-by                    % [b w] %%% b: bus number, w: waiting time.
    aload pop mul                   % a %%% a: answer
} def

/is-bus-number {                    % (s)
    (x) ne
} def 

/find-time {                        % [time inc] [off bus] 
    aload pop                       % [time inc] off bus
    3 -1 roll                       % off bus [time inc]
    aload pop                       % off bus time inc 
    3 index                         % off bus time inc off 
    2 index                         % off bus time inc off time 
    add                             % off bus time inc t+o
    3 index                         % off bus time inc t+o bus 
    mod                             % off bus time inc t+o%b 
    0 eq                            % off bus time inc t+o%b=0? 
    {                               % off bus time inc %%% (yes, match => [time inc*bus])
        4 -1 roll                   % bus time inc off 
        pop                         % bus time inc 
        3 -1 roll                   % time inc bus 
        mul                         % time inc*bus
        [ 3 1 roll ]                % [time inc*bus]
    }
    {                               % off bus time inc %%% (no, recur with [time+inc inc] [off bus])
        exch                        % off bus inc time 
        1 index                     % off bus inc time inc 
        add                         % off bus inc time+inc
        exch                        % off bus time+inc inc 
        [ 3 1 roll ]                % off bus [time+inc inc]
        3 1 roll                    % [time+inc inc] off bus 
        [ 3 1 roll ]                % [time+inc inc] [off bus]
        find-time
    } ifelse 
} def 

/part-2 {
    (input.txt) read-input          % A
    1 get                           % (s)
    (,) split-string                % S
    indexed-array
    {
        1 get 
        is-bus-number
    } filter-array                  % S' %%% S': array of [ix, busno] elements
    {                               % [ix (b)]
        aload pop                   % ix (b)
        cvi                         % ix b 
        [3 1 roll]                  % [ix b]
    } map-array
    1 split-at                      % [[0 b1]] [...]
    exch                            % [...] [[0 b1]]
    0 get                           % [...] [0 b1]
    exch                            % [0 b1] [...] 
    { find-time }
    fold-array
    0 get 
} def

part-1
part-2
