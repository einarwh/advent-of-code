% pos arr -> stop=true pos arr
/opstop { 
    true 
} def

% { op } pos arr -> stop=false pos arr
/opbin {
    3 1 roll        % pos arr {op}
    2 copy          % pos arr pos arr {op}
    1 add           % pos+1 arr pos arr {op}
    3 getinterval   % [ai bi si] pos arr {op}
    aload pop       % si bi ai pos arr {op}
    3 1 roll        % bi ai si pos arr {op}
    4 index exch    % bi arr ai si pos arr {op}
    get             % b ai si pos arr {op}
    exch            % ai b si pos arr {op}
    4 index exch    % ai arr b si pos arr {op}
    get             % a b si pos arr {op}
    6 -1 roll       % {op} a b si pos arr
    exec            % a?b si pos arr (op!)
    3 index         % arr a?b si pos arr 
    3 1 roll        % a?b si arr pos arr 
    put             % pos arr
    4 add           % pos+4 arr
    false           % continue! pos+4 arr
} def

% pos arr -> stop=false pos arr
/opadd {
    { add } opbin
} def

% pos arr -> stop=false pos arr
/opmul {
    { mul } opbin
} def

% pos arr -> { op } pos arr
/loadop {
    2 copy                     % pos arr pos arr
    get                        % arr[pos] pos arr | arr[pos] == opcode
    dup                        % opcode opcode pos arr 
    99 eq                      % stop? opcode pos arr
    {                          % opcode pos arr (stop!)
        pop { opstop }         % { opstop } pos arr
    } 
    {                          % opcode pos arr (!stop)
        dup
        1 eq                   % add? opcode pos arr
        {                      % opcode pos arr (add!)
            pop { opadd }      % { opadd } pos arr
        }
        {                      % opcode pos arr (!add)
            dup
            2 eq               % mul? opcode pos arr
            {                  % opcode pos arr (mul!)
                pop { opmul }  % { opmul } pos arr
            }
            {                  % opcode pos arr (!mul)
                pop stop       % error
            }
            ifelse
        }
        ifelse
    }
    ifelse
} def

% -> bool pos arr
/read {
    [ (alarm) run ]
} def 

% stop? pos arr -> result
/program {
    {
        { exit } if
        loadop exec
    } loop
    pop
    0 get
} def 

/target 19690720 def

% j i -> _
/output {
    exch            % i j 
    100 mul add     % result
    pstack
} def 

/main {
    0 1 99 
    {                       % i
        0 1 99 
        {                   % j i 
            2 copy          % j i j i
            read            % arr j i j i 
            3 1 roll        % j i arr j i
            2 index         % arr j i arr j i
            2               % 2 arr j i arr j i
            3 -1 roll       % j 2 arr i arr j i
            put             % i arr j i
            1 index         % arr i arr j i
            1               % 1 arr i arr j i
            3 -1 roll       % i 1 arr arr j i
            put             % arr j i
            0               % pos=0 arr j i
            false           % stop=false pos=0 arr j i
            program         % result j i
            target          % v result j i
            eq              % found? j i
            {               % j i
                output
                stop
            }
            { pop }         % i
            ifelse
        } for
        pop                 %
    } for
} def

main
