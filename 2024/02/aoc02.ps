% Advent of Code 2024. Day 02: Red-Nosed Reports
% gs -DNOSAFER aoc02.ps

/read-input
{                                       % fn
    [                                   % fn [
    exch                                % [ fn 
    (r) file                            % [ F
    {   
        dup                             % [ .. F F
        160 string                      % [ ... F F buf
        readline                        % [ ... F (s) 
        {   
            exch                        % [ ... (s) F
        }   
        {   
            exch                        % [ ... (s) F 
            closefile                   % [ ... (s) 
            ]                           % [ ... (s) ] 
            exit    
        } ifelse    
    } loop                              % Rs
} def 

/split-at {                             % i A 
    2 copy                              % i A i A 
    0 exch                              % i 0 A i A 
    getinterval                         % A'=A[0,i-1] i A
    3 1 roll                            % i A A' 
    1 index length                      % L i A A'
    1 index                             % i L i A A'
    sub                                 % c i A A'
    getinterval                         % A''=A[i,L-1] A'           
} def 

/map-array {                            % A {op} %%% {op} is operation to be called for each element in A
    [ 3 1 roll                          % [ A {op}
    exch                                % [ {op} A
    {                                   % [ {op} e
        1 index                         % [ {op} e {op}
        exec                            % [ {op} r %%% r is result of executing {op} on e
        exch                            % [ r {op}
    } forall                            % [ ... {op}
    pop                                 % [ ...
    ]                                   % [ r1 r2 ... ]
} def

/filter-array {                         % A {p} %%% {p} is predicate to be called for each element in A
    [ 3 1 roll                          % [ A {p}
    exch                                % [ {p} A
    {                                   % [ {p} e
        2 copy                          % [ {p} e {p} e
        exch                            % [ {p} e e {p}
        exec                            % [ {p} e include?
        {                               % [ {p} e %%% yes, keep e
            exch                        % [ e {p}
        }
        {                               % [ {p} e %%% no, reject e
            pop                         % [ {p}
        } ifelse                        % [ e? {p}
    } forall                            % [ ... {p}
    pop                                 % [ ...
    ]                                   % [ e... ]
} def 

/forall-array {                         % A {p} %%% {p} is predicate to be called for each element in A
    true 3 1 roll                       % T A {p} %%% Assume T
    exch                                % T {p} A
    {                                   % T {p} e
        1 index                         % T {p} e {p}
        exec                            % T {p} satisfied?
        not                             % T {p} failed?
        {                               % T {p} failed! %%% terminate with false
            exch pop                    % {p} %%% dropped default true
            false exch                  % F {p}
            exit                        % F {p} - out of loop
        } if                            % 
    } forall                            % B {p}
    pop                                 % B
} def 

/exists-array {                         % A {p} %%% {p} is predicate to be called for each element in A
    false 3 1 roll                      % F A {p} %%% Assume F
    exch                                % F {p} A
    {                                   % F {p} e
        1 index                         % F {p} e {p}
        exec                            % F {p} satisfied?
        {                               % F {p} yes! %%% terminate with true
            exch pop                    % {p} %%% dropped default false
            true exch                   % T {p}
            exit                        % T {p} - out of loop
        } if                            % 
    } forall                            % B {p}
    pop                                 % B
} def 

/pairwise-array {                       % A 
    [ exch 
    dup length 2 sub 0 1
    3 -1 roll
    {
        1 index exch
        [ 3 1 roll 
        2 copy 
        1 add 
        get
        3 1 roll
        get exch ]
        exch 
    } for
    pop 
    ]
} def 

/split-string {                         % (s=string) (z=sep) 
    [                                   % s z [ 
    3 1 roll                            % [ s z  
    {                                   % [ s z
        search                          % [ s'=rest (h=head z)? found?
        {                               % [ s' z h (yes, found)
            3 1 roll                    % [ h s' z  
        }       
        {                               % [ s  (not found)
            exit                        % [ s
        } ifelse        
    } loop      
    ]                                   % [ .. ]
} def 

/parse-numbers {                        % S (string)
    ( ) split-string                    % A (with potentially empty strings)
    { length 0 ne }                     % A predicate
    filter-array                        % A (without any empty strings)
    { cvi }                             % A projection
    map-array                           % A (with numbers)
} def

/diff {                                 % A [n m]
    dup 0 get exch                      % A n 
    1 get                               % m n
    sub                                 % n - m
} def

/graceful-increment {                   % n 
    dup                                 % n n
    1 ge                                % n (n>=1?)
    exch                                % (n>=1?) n
    3 le                                % (n>=1?) (n<=3?)
    and                                 % B
} def

/graceful-decrement {                   % n 
    dup                                 % n n
    -1 le                               % n (n<=-1?)
    exch                                % (n<=-1?) n
    -3 ge                               % (n<=-1?) (n>=-3?)
    and                                 % B
} def

/graceful-ascent {                      % A
    { graceful-increment }
    forall-array 
} def 

/graceful-descent {                     % A
    { graceful-decrement }
    forall-array 
} def 

/is-safe {                              % A 
    dup                                 % A A
    graceful-ascent exch                % B A 
    graceful-descent                    % B B
    or                                  % B
} def 

/drop-item {                            % A ix 
    [ 3 1 roll                          % [ A ix 
    exch                                % [ ix A 
    0 exch                              % [ ix 0 A
    {                                   % [ ix i e
        3 copy pop                      % [ ix i e ix i 
        eq                              % [ ix i e ?
        {                               % [ ix i e %%% drop this item
            pop                         % [ ix i
        }
        {                               % [ ix i e %%% keep this item
            3 1 roll                    % [ e ix i
        } ifelse 
        1 add                           % [ ... ix (i+1)
    } forall
    pop pop                             % [ ...
    ]                                   % A'
} def 

/permute {                              % A         
    [ exch                              % [ A
    dup length 1 sub 0 1                % [ A L-1 0 1 
    3 -1 roll                           % [ A 0 1 L-1
    {                                   % [ A i 
        1 index exch                    % [ A A i 
        drop-item                       % [ A A'
        exch                            % [ A' A
    } for
    ]
} def 

/run {
    % Read
    read-input
    { length 0 ne } filter-array
    { parse-numbers } map-array 
    
    % Part 1
    dup 
    { pairwise-array { diff } map-array } map-array
    { is-safe } filter-array 
    length 

    % Part 2 
    exch
    { 
        permute 
        { pairwise-array { diff } map-array } map-array
        { is-safe } exists-array
    }
    map-array
    {} filter-array
    length 
} def 

(input) run 
