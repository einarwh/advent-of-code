% Advent of Code 2023. Day 1: Trebuchet?!
% gs -DNOSAFER aoc01.ps

/read-input
{                           % fn
    [                       % fn [
    exch                    % [ fn 
    (r) file                % [ F
    {
        dup                 % [ .. F F
        80 string           % [ ... F F buf
        readline            % [ ... F (s) 
        {
            exch            % [Â ... (s) F
        }
        {
            exch            % [ ... (s) F 
            closefile       % [ ... (s) 
            ]               % [ ... (s) ] 
            exit
        } ifelse 
    } loop                  % Rs
} def 

% Returns non-zero if there is a digit, zero otherwise. 
/find-digit-as-number {         % S 
    0 get                       % C
    (0) 0 get sub               % n
    dup                         % n n 
    10 ge { pop 0 } if          % n | 0
} def  

% Returns true if P is a substring of S
/starts-with {                   % S P
    dup length                  % S P Lp
    3 -1 roll                   % P Lp S
    dup length                  % P Lp S Ls
    2 index                     % P Lp S Ls Lp 
    ge                          % P Lp S (Ls>=Lp?)
    {
        exch                    % P S Lp
        0 exch                  % P S 0 Lp
        getinterval             % P S'
        eq                      % ?
    }
    {                           % P Lp S
        pop pop pop             % 
        false                   % F
    } ifelse
} def 

/find-digit-as-word {           % S
    dup (one) starts-with       % S ? 
    {
        pop 1                   % 1
    }
    {                           % S
        dup (two) starts-with
        {
            pop 2 
        }
        {
            dup (three) starts-with 
            {
                pop 3 
            } 
            {
                dup (four) starts-with 
                {
                    pop 4 
                } 
                {
                    dup (five) starts-with 
                    {
                        pop 5 
                    } 
                    {
                        dup (six) starts-with 
                        {
                            pop 6 
                        } 
                        {
                            dup (seven) starts-with 
                            {
                                pop 7
                            }
                            {
                                dup (eight) starts-with 
                                {
                                    pop 8
                                }
                                {
                                    dup (nine) starts-with 
                                    {
                                        pop 9
                                    } 
                                    {
                                        pop 0
                                    } ifelse
                                } ifelse
                            } ifelse 
                        } ifelse 
                    } ifelse 
                } ifelse 
            } ifelse
        } ifelse
    } ifelse
} def 

/find-digit-somehow {               % S
    dup find-digit-as-number        % S d
    dup 0 eq                        % S d
    {                               % S d (d = 0)
        pop                         % S
        find-digit-as-word          % d (0 if none)
    }
    {                               % S d (d > 0)
        exch pop                    % d
    } ifelse
} def 

/find-digits-1 {
    { (0) 0 get sub }
    map-array
    { 10 lt }
    filter-array 
} def 

/headless {                      % S 
    dup length 1 sub             % S count
    1 exch                       % S 1 count 
    getinterval                  % S'
} def 

/substrings {                    % S 
    [ exch                       % [ S
    dup length 1 sub             % [ S L
    {                            % [ S 
        dup headless             % [ S S'
    } repeat 
    ]                            % [ S ... ]
} def 

/find-digits-2 {                    % S 
    substrings 
    { find-digit-somehow }
    map-array
    { 0 gt }
    filter-array 
} def 

/to-number {
    dup 0 get 
    10 mul 
    exch 
    dup length 1 sub get 
    add
} def

/map-array {                        % A {op} %%% {op} is operation to be called for each element in A
    [ 3 1 roll                      % [ A {op}
    exch                            % [ {op} A
    {                               % [ {op} e
        1 index                     % [ {op} e {op}
        exec                        % [ {op} r %%% r is result of executing {op} on e
        exch                        % [ r {op}
    } forall                        % [ ... {op}
    pop                             % [ ...
    ]                               % [ r1 r2 ... ]
} def

/filter-array {                     % A {p} %%% {p} is predicate to be called for each element in A
    [ 3 1 roll                      % [ A {p}
    exch                            % [ {p} A
    {                               % [ {p} e
        2 copy                      % [ {p} e {p} e
        exch                        % [ {p} e e {p}
        exec                        % [ {p} e include?
        {                           % [ {p} e %%% yes, keep e
            exch                    % [ e {p}
        }
        {                           % [ {p} e %%% no, reject e
            pop                     % [ {p}
        } ifelse                    % [ e? {p}
    } forall                        % [ ... {p}
    pop                             % [ ...
    ]                               % [ e... ]
} def 

/sum-array {
    0 exch 
    { add } forall 
} def 

(input) read-input
{ length 0 ne }
filter-array

dup 

% Part 1
{ find-digits-1 to-number }
map-array
sum-array

exch 

% Part 2 
{ find-digits-2 to-number }
map-array
sum-array
