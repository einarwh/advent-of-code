% Advent of Code 2023. Day 1: Trebuchet?! (part A).
% gs -DNOSAFER aoc01a.ps

/read-input
{                           % fn
    [                       % fn [
    exch                    % [ fn 
    (r) file                % [ F
    {
        dup                 % [ .. F F
        80 string           % [ ... F F buf
        readline            % [ ... F (s) 
        {
            exch            % [Â ... (s) F
        }
        {
            exch            % [ ... (s) F 
            closefile       % [ ... (s) 
            ]               % [ ... (s) ] 
            exit
        } ifelse 
    } loop                  % Rs
} def 

/find-digits {
    [ exch 
    {
        (0) 0 get sub
        dup 
        10 ge { pop } if 
    } forall
    ]
} def 

/to-number {
    dup 0 get 
    10 mul 
    exch 
    dup length 1 sub get 
    add
} def

/map-array {                        % A {op} %%% {op} is operation to be called for each element in A
    [ 3 1 roll                      % [ A {op}
    exch                            % [ {op} A
    {                               % [ {op} e
        1 index                     % [ {op} e {op}
        exec                        % [ {op} r %%% r is result of executing {op} on e
        exch                        % [ r {op}
    } forall                        % [ ... {op}
    pop                             % [ ...
    ]                               % [ r1 r2 ... ]
} def

/filter-array {                     % A {p} %%% {p} is predicate to be called for each element in A
    [ 3 1 roll                      % [ A {p}
    exch                            % [ {p} A
    {                               % [ {p} e
        2 copy                      % [ {p} e {p} e
        exch                        % [ {p} e e {p}
        exec                        % [ {p} e include?
        {                           % [ {p} e %%% yes, keep e
            exch                    % [ e {p}
        }
        {                           % [ {p} e %%% no, reject e
            pop                     % [ {p}
        } ifelse                    % [ e? {p}
    } forall                        % [ ... {p}
    pop                             % [ ...
    ]                               % [ e... ]
} def 

/sum-array {
    0 exch 
    { add } forall 
} def 

(input) read-input
{ length 0 ne }
filter-array
{ find-digits to-number }
map-array
sum-array
